

# NEST overall comments

...

- functions accept objects of different types (like Connect etc.) you can put
    whatever in there
- all parameters are just nested dicts (hey, why do we have OOP?) why don't we
    write a single function called run() and pass all parameters as dict there?
- all functions return IDs not objects (insane!) how do I control staff?!
- usually the return value is a list even if a single object was
    created/updated. Same with single input parameters. WTF?
- the permanent use of a global state is a killer..
- model customization is implemented as a "copy" function instead of
    inheritance, which is a great limit comparing to OOP



# simulation configuration management

- pypet - in development + hardly uses global state